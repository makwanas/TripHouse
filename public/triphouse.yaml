openapi: 3.0.2
info:
  version: 1.0.0
  title: Lodgings API
  description: A simple API for an Airbnb-like application.

paths:
  /lodgings:
    get:
      summary: Fetch a list of lodgings
      description: >
        Returns a paginated list of lodgings.
      operationId: getLodgingsPage
      tags:
        - Lodgings
      parameters:
        - name: page
          in: query
          description: >
            Specifies a specific page of lodgings to request.
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  pageNumber:
                    type: integer
                    description: Page number of returned lodgings.
                    example: 1
                  totalPages:
                    type: integer
                    description: Total number of pages available.
                    example: 127
                  pageSize:
                    type: integer
                    description: Number of lodgings per page.
                    example: 10
                  totalCount:
                    type: integer
                    description: Total number of lodgings.
                    example: 1264
                  lodgings:
                    type: array
                    description: The returned lodgings.
                    items:
                      $ref: '#/components/schemas/Lodging'
    post:
      summary: Add a new lodging
      description: >
        Creates a new lodging with specified data and adds it to the
        application's database.
      operationId: addLodging
      tags:
        - Lodgings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lodging'
      responses:
        '201':
          description: New lodging successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: Unique ID of the created lodging.
                    example: 19
        '400':
          description: >
            The request body was either not present or did not contain all of
            the required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/lodgings/{lodgingid}':
    parameters:
      - name: lodgingid
        in: path
        description: Unique ID of a lodging.
        required: true
        schema:
          type: string
          example: 5ce48a2ddf60d448aed2b1d5
    get:
      summary: Fetch data for a specific lodging.
      description: >
        Returns complete data for a the lodging specified by `lodgingid`.
      operationId: getLodgingById
      tags:
        - Lodgings
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lodging'
        '404':
          description: Specified `lodgingid` not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update data for a specific lodging.
      description: |
        Replaces the data for the lodging specified by `lodgingid`.
      operationId: replaceLodging
      tags:
        - Lodgings
      requestBody:
        description: |
          Lodging data to replace data for the lodging specified by `lodgingid`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Lodging'
      responses:
        '200':
          description: Success
        '400':
          description: The request body was either not present or did not contain all of the required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Specified `lodgingid` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Remove a specific lodging from the database.
      description: |
        Completely removes the data for the lodging specified by `lodgingid`.
      operationId: removeLodging
      tags:
        - Lodgings
      responses:
        '204':
          description: Success
        '404':
          description: Specified `lodgingid` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /photos:
    post:
      summary: Add a new photo
      description: >
        Creates a new photo with specified data and adds it to the
        application's database.
      operationId: addPhoto
      tags:
        - Photos
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Photo'
      responses:
        '201':
          description: New photo successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: Unique ID of the created photo.
                    example: 10
        '400':
          description: >
            The request body was either not present or did not contain all of
            the required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/photos/{photoID}':
    parameters:
      - name: photoID
        in: path
        description: Unique ID of a photo.
        required: true
        schema:
          type: string
          example: 5ce48a2ddf60d448aed2b1c3
    get:
      summary: Fetch data for a specific photo.
      description: >
        Returns complete data for a the photo specified by `photoID`.
      operationId: getPhotoById
      tags:
        - Photos
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Photo'
        '404':
          description: Specified `photoID` not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/media/photos/{photoID}-{size}.jpg':
    parameters:
      - name: photoID
        in: path
        description: Unique ID of a photo.
        required: true
        schema:
          type: string
          example: 5ce48a2ddf60d448aed2b1c3
      - name: size
        in: path
        description: |
          Size code indicating the image size to be downloaded.  This can be
          one of the following values:
            * '1024' - maximum side length 1024px
            * '640' - maximum side length 640px
            * '256' - maximum side length 256px
            * '128' - maximum side length 128px
            * 'orig' - original upload size
        required: true
        schema:
          type: string
          example: orig

    get:
      summary: Download a photo.
      description: >
        Downloads the photo data for the specified `photoId`.  The downloaded
        photo will be sized according to the specified `size` code specified
        in the URL.
      operationId: downloadPhoto
      tags:
        - Photos
      responses:
        '200':
          description: Image data for the specified photo.
          content:
            image/jpeg:
              schema:
                type: string
        '404':
          description: Specified `photoId` or `size` not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update data for a specific photo.
      description: >
        Replaces the data for the photo specified by `photo`.
      operationId: replacePhoto
      tags:
        - Photos
      requestBody:
        description: >
          Photo data to replace data for the photo specified by `photoID`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Photo'
      responses:
        '200':
          description: Success
        '400':
          description: >
            The request body was either not present or did not contain all of the required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >
            The request tried to change the `userid` or the `lodgingid` for a photo.  Once a photo is created, these cannot be changed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Specified `photoID` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Remove a specific photo from the database.
      description: >
        Completely removes the data for the photo specified by `photoID`.
      operationId: removePhoto
      tags:
        - Photos
      responses:
        '204':
          description: Success
        '404':
          description: Specified `photoID` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /reviews:
    post:
      summary: Add a new review
      description: >
        Creates a new review with specified data and adds it to the
        application's database.
      operationId: addNewReview
      tags:
        - Reviews
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '201':
          description: New review successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: Unique ID of the created review.
                    example: 10
        '400':
          description: >
            The request body was either not present or did not contain all of the required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >
            The specified user has already posted a review for the specified lodging.  A given user may only post one review for a given lodging.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/reviews/{reviewID}':
    parameters:
      - name: reviewID
        in: path
        description: Unique ID of a review.
        schema:
          type: integer
        example: 0
        required: true
    get:
      summary: Fetch data for a specific review.
      description: >
        Returns complete data for a the review specified by `reviewID`.
      operationId: getReview
      tags:
        - Reviews
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          description: Specified `reviewID` not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update data for a specific review.
      description: >
        Replaces the data for the review specified by `review`.
      operationId: replaceReview
      tags:
        - Reviews
      requestBody:
        description: >
          Review data to replace data for the review specified by `reviewID`.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '200':
          description: Success
        '400':
          description: >
            The request body was either not present or did not contain all of the required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: >
            The request tried to change the `userid` or the `lodgingid` for a review.  Once a review is created, these cannot be changed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Specified `reviewID` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Remove a specific review from the database.
      description: >
        Completely removes the data for the review specified by `reviewID`.
      operationId: removeReview
      tags:
        - Reviews
      responses:
        '204':
          description: Success
        '404':
          description: Specified `reviewID` not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'


  /users:
    post:
      summary: Add a new application user
      description: >
        Creates a new user with specified data and adds it to the
        application's database.
      operationId: addNewUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: New user successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: Unique ID of the created user.
                    example: 19
        '400':
          description: The request body was either not present or did not contain all of the required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/login:
    post:
      summary: Log in a User.
      description: >
        Authenticate a specific User with their email address and password.
      operationId: authenticateUser
      tags:
        - Users
      requestBody:
        required: true
        description: >
          Email address and plain-text password for the user being authenticated.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              email: TheLastJedi@gmail.com
              password: hunter2
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: >
                      A JWT authentication token.
                    example: aaaaaaaa.bbbbbbbb.cccccccc

        '400':
          description: >
            The request body was either not present or did not contain all of the required fields.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: >
            The specified credentials were invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >
            An internal server error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  '/users/{userID}':
    parameters:
      - name: userID
        in: path
        description: Unique ID of a user.
        schema:
          type: integer
        example: 5
        required: true
    get:
      summary: Fetch data for a specific user.
      description: >
        Returns complete data for a the user specified by `userID`.
      operationId: getUser
      tags:
        - Users
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Specified `userID` not found.  This may be returned if a user is not authorized to access the requested data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userid}/lodgings:
    parameters:
      - name: userid
        in: path
        description: Unique ID of a user.
        schema:
          type: integer
        example: 0
        required: true
    get:
      summary: Fetch a user's owned lodgings.
      description: >
        Returns a list of all of the lodgings owned by the user specified by `userid`.
      operationId: getUserLodgings
      tags:
        - Users
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  lodgings:
                    type: array
                    description: The lodgings owned by the specified user.
                    items:
                      $ref: '#/components/schemas/Lodging'

  /users/{userid}/reviews:
    parameters:
      - name: userid
        in: path
        description: Unique ID of a user.
        schema:
          type: integer
        example: 21
        required: true
    get:
      summary: Fetch a user's reviews.
      description: >
        Returns a list of all of the reviews written by the user specified by `userid`.
      operationId: getUserReviews
      tags:
        - Users
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  lodgings:
                    type: array
                    description: The reviews written by the specified user.
                    items:
                      $ref: '#/components/schemas/Review'

  /users/{userid}/photos:
    parameters:
      - name: userid
        in: path
        description: Unique ID of a user.
        schema:
          type: integer
        example: 21
        required: true
    get:
      summary: Fetch a user's photos.
      description: >
        Returns a list of all of the photos posted by the user specified by `userid`.
      operationId: getUserPhotos
      tags:
        - Users
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  lodgings:
                    type: array
                    description: The photos posted by the specified user.
                    items:
                      $ref: '#/components/schemas/Photo'


components:
  schemas:
    User:
      description: >
        An object representing information about an application user.
      type: object
      properties:
        name:
          type: string
          description: Real name of the user.  This is required when creating a new User.
          example: Luke Skywalker
        email:
          type: string
          description: The user's email address.  This is required to be unique among all Users.
          example: TheLastJedi@gmail.com
        password:
          type: string
          description: The user's plaintext password.  This is required when creating a new User and when logging in.
          example: hunter2
        admin:
          type: boolean
          description: Boolean flag indicating whether the user has admin permissions.
          default: false
      required:
        - name
        - email
        - password

    Lodging:
      description: >
        An object representing information about a single lodging.
      type: object
      properties:
        name:
          type: string
          description: Name of the lodging.
          example: American Dream Pizza
        address:
          type: object
          properties:
            street:
              type: string
              description: Street address of the lodging.
              example: 2525 NW Monroe Ave.
            city:
              type: string
              description: The city in which the lodging resides.
              example: Corvallis
            state:
              type: string
              description: The state in which the lodging resides.
              example: OR
            zip:
              type: string
              description: >
                The zip code of the city in which the lodging resides.
              example: '97330'
        phone:
          type: string
          description: The lodging' phone number.
          example: '541-757-1713'
        category:
          type: string
          description: The lodging' category.
          example: 'Restaurant'
        subcategory:
          type: string
          description: The lodging' subcategory.
          example: 'Pizza'
        website:
          type: string
          description: The lodging' website URL.
          example: 'http://adpizza.com'
        email:
          type: string
          description: The lodging' email address.
          example: 'brian@adpizza.com'
        photos:
          type: array
          description: >
            An array of photos of the lodging.  These are only returned when
            fetching detailed information about a lodging.
          items:
            $ref: '#/components/schemas/Photo'
      required:
        - name
        - address
        - phone
        - category
        - subcategory

    Photo:
      description: >
        An object representing information about a photo of a lodging.
      type: object
      properties:
        lodgingid:
          type: string
          description: >
            The ID of the lodging associated with this photo.  This is
            required when creating a photo.
          example: 5ce48a2ddf60d448aed2b1d5
        caption:
          type: string
          description: Caption text for the photo
          example: "Kale!"
        file:
          type: string
          description: >
            When the photo is being uploaded, this field will hold the binary
            data contained in the photo file.  This is required only when
            creating a photo.
        urls:
          type: object
          description: >
            When photo information is fetched from the API, this field will
            contain an object that specifies all images available for
            download for this photo.  The object will contain a single entry
            per available image size.  For example, if the '1024' image size
            is available for this photo, this object will contain a '1024'
            entry.
          example:
            '1024': /media/photos/5ce48a2ddf60d448aed2b1c3-1024.jpg
            '640': /media/photos/5ce48a2ddf60d448aed2b1c3-640.jpg
            '256': /media/photos/5ce48a2ddf60d448aed2b1c3-256.jpg
            '128': /media/photos/5ce48a2ddf60d448aed2b1c3-128.jpg
            'orig': /media/photos/5ce48a2ddf60d448aed2b1c3-orig.jpg
      required:
        - lodgingid
        - file

    Review:
      description: >
        An object representing information about a review of a lodging.
      type: object
      properties:
        userid:
          type: integer
          description: >
            The ID of the user associated with this review.  This is required when creating or updating a review.
          example: 7
        lodgingid:
          type: integer
          description: >
            The ID of the lodging associated with this review.  This is required when creating or updating a review.
          example: 3
        dollars:
          type: integer
          description: A rating of the expensiveness of a lodging.  Must be an integer between 1 and 4.
          example: 3
          minimum: 1
          maximum: 4
        stars:
          type: number
          description: A rating of the quality of a lodging.  Must be an number between 0 and 5.
          example: 5
          minimum: 0
          maximum: 5
        review:
          type: string
          description: Textual lodging review.
          example: "Great produce!"
      required:
        - userid
        - lodgingid
        - dollars
        - stars

    Error:
      description: >
        An object representing an error response from the API.
      type: object
      properties:
        error:
          type: string
          description: A message describing the error.

tags:
  - name: Lodgings
    description: >
      API endpoints related to lodging resources.
  - name: Photos
    description: >
      API endpoints related to photo resources.
  - name: Reviews
    description: >
      API endpoints related to review resources.
  - name: Users
    description: >
      API endpoints related to user resources.
